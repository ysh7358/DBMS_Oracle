/*   TBL_FLOWER
   -------------------------------------------------------------
   FLOWER_NAME : VARCHAR2(1000) : PRIMARY KEY
   FLOWER_COLOR : VARCHAR2(1000) : PRIMARY KEY
   -------------------------------------------------------------
   FLOWER_PRICE : NUMBER
   FLOWER_DATE_OF_EXPIRY : DATE
   FLOWER_STOCK : NUMBER


   TBL_POT
   ---------------------------------------------
   POT_NUMBER : NUMBER : PRIMARY KEY
   ---------------------------------------------
   POT_COLOR : VARCHAR2(1000)
   POT_SHAPE : VARCHAR2(1000)
   POT_STOCK : NUMBER
   POT_PRICE : NUMBER
   FLOWER_NAME : VARCHAR2(1000) : FOREIGN KEY
   FLOWER_COLOR : VARCHAR2(1000) : FOREIGN KEY*/

CREATE TABLE TBL_FLOWER(
   FLOWER_NAME VARCHAR2(1000),
   FLOWER_COLOR VARCHAR2(1000),
   FLOWER_PRICE NUMBER,
   FLOWER_DATE_OF_EXPIRY DATE,
   FLOWER_STOCK NUMBER,
   CONSTRAINT FLOWER_PK PRIMARY KEY(FLOWER_NAME, FLOWER_COLOR)
);

DROP TABLE TBL_FLOWER;


CREATE TABLE TBL_POT(
   POT_NUMBER NUMBER CONSTRAINT PK_POT PRIMARY KEY,
   POT_COLOR VARCHAR2(1000),
   POT_SHAPE VARCHAR2(1000),
   POT_STOCK NUMBER,
   POT_PRICE NUMBER,
   FLOWER_NAME VARCHAR2(1000),
   FLOWER_COLOR VARCHAR2(1000),
   CONSTRAINT FK_POT FOREIGN KEY(FLOWER_NAME, FLOWER_COLOR)
   REFERENCES TBL_FLOWER(FLOWER_NAME, FLOWER_COLOR)
   /*DELETE 시, 자식 테이블에서 참조중인 데이터까지 삭제 된다.*/
   ON DELETE CASCADE
);

DROP TABLE TBL_POT;

/*   TBL_OWNER      
   ------------------------------------------------------------
   OWNER_PHONE_NUMBER : VARCHAR2(1000) : PRIMARY KEY
   ------------------------------------------------------------
   OWNER_NAME : VARCHAR2(1000)
   OWNER_AGE : NUMBER
   OWNER_ADDRESS : VARCHAR2(1000)

   TBL_PET
   ------------------------------------------------------------
   PET_PIN_NUMBER : NUMBER : PRIMARY KEY
   ------------------------------------------------------------
   PET_SPECIES : VARCHAR2(1000)
   PET_NAME : VARCHAR2(1000)
   PET_AGE : NUMBER
   PET_TROUBLE : VARCHAR2(1000)
   OWNER_PHONE_NUMBER : VARCHAR2(1000) : FOREIGN KEY*/

CREATE TABLE TBL_OWNER(
   OWNER_PHONE_NUMBER VARCHAR2(1000) CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(1000),
   OWNER_AGE NUMBER,
   OWNER_ADDRESS VARCHAR2(1000)
);

CREATE TABLE TBL_PET(
   PET_PIN_NUMBER NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_SPECIES VARCHAR2(1000),
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER,
   PET_TROUBLE VARCHAR2(1000),
   OWNER_PHONE_NUMBER VARCHAR2(1000),
   CONSTRAINT FK_PET FOREIGN KEY(OWNER_PHONE_NUMBER)
   REFERENCES TBL_OWNER(OWNER_PHONE_NUMBER)
);
/*==============================================*/
/*=====================DML======================*/
/*==============================================*/

/*TBL_MEMBER 테이블에 정보 조회*/
SELECT * FROM TBL_MEMBER;

/*TBL_MEMBER 테이블에 정보 추가*/
INSERT INTO TBL_MEMBER (MEMBER_NAME, MEMBER_AGE)
VALUES ('홍길동', 25);

/*TBL_MEMBER 테이블에 정보 수정*/
UPDATE TBL_MEMBER 
SET MEMBER_NAME = '이순신'
WHERE MEMBER_NAME = '한동석';

/*TBL_MEMBER 테이블에 정보 삭제*/
DELETE FROM TBL_MEMBER
WHERE MEMBER_AGE >= 25;

/*TBL_CAR 테이블에 정보 조회*/
SELECT * FROM TBL_CAR;

/*TBL_CAR 테이블에 정보 추가*/
INSERT INTO TBL_CAR
(CAR_NUMBER, CAR_BRAND, CAR_RELEASE_DATE, CAR_COLOR, CAR_PRICE)
VALUES(1, '벤츠', TO_DATE('2019-12-04 16:24:35', 'YYYY-MM-DD HH24:MI:SS'), 'BLACK AND WHITE', 4000);

/*TBL_CAR 테이블에 정보 수정*/
UPDATE TBL_CAR
SET CAR_PRICE = 10000
WHERE CAR_NUMBER = 1;

/*TBL_CAR 테이블에 정보 삭제*/
DELETE FROM TBL_CAR
WHERE CAR_NUMBER = 1;

/*SEQUENCE는 설정한 증감량과 시작값으로 증가하는 값을 관리하는 개체이다.*/
CREATE SEQUENCE SEQ_STUDENT;

/*TBL_STUDENT 테이블에 정보 조회*/
SELECT * FROM TBL_STUDENT;

/*TBL_STUDENT 테이블에 정보 추가*/
INSERT INTO TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR, STUDENT_BIRTH)
VALUES(SEQ_STUDENT.NEXTVAL, 'hds', '한동석', '컴퓨터공학', '1980-01-01');

INSERT INTO TBL_STUDENT
VALUES(SEQ_STUDENT.NEXTVAL, 'hgd', '홍길동', '컴퓨터공학', 'M', '1988-01-01');

/*TBL_STUDENT 테이블에 정보 수정*/
UPDATE TBL_STUDENT
SET STUDENT_GENDER = 'M'
WHERE STUDENT_NUMBER = 1;

/*TBL_STUDENT 테이블에 정보 삭제*/
DELETE FROM TBL_STUDENT
WHERE STUDENT_NUMBER = 1;

/*관계를 맺고 있는 테이블들의 DML*/
/*
 * 부모 테이블의 값이 있어야 자식 테이블에서 참조할 수 있다.
 * 자식에서 참조중인 부모의 데이터가 있다면, 부모에서 수정 및 삭제가 불가하다.
 * 만약 자식 테이블 생성 시 FK 제약조건에 ON DELETE CASCADE 옵션을 작성해주면
 * 부모 데이터 삭제 시, 참조중인 자식 데이터들이 자동으로 같이 삭제된다.
 * */
CREATE SEQUENCE SEQ_POT;

SELECT * FROM TBL_FLOWER;
SELECT * FROM TBL_POT;

INSERT INTO TBL_FLOWER
VALUES('장미', '흰색', 9000, SYSDATE + 2, 10);

INSERT INTO TBL_POT
VALUES(SEQ_POT.NEXTVAL, 'BLACK', 'PALM', 2, 22000, '장미', '빨간색');

UPDATE TBL_FLOWER
SET FLOWER_NAME = '튤립'
WHERE FLOWER_NAME = '장미' AND FLOWER_COLOR = '빨간색';

DELETE FROM TBL_FLOWER
WHERE FLOWER_NAME = '장미';

/*
 * TBL_OWNER, TBL_PET
 * 
 * 보호자 정보 추가
 * 반려동물 정보 추가
 * 보호자 이름 수정
 * 반려동물의 보호자 번호 수정
 * 보호자 삭제
 * 보호자가 없는 반려동물 추가
 * 
 * */

/*시퀀스 생성*/
CREATE SEQUENCE SEQ_PET;

SELECT * FROM TBL_OWNER;
SELECT * FROM TBL_PET
WHERE OWNER_PHONE_NUMBER IS NULL;

/*보호자 추가*/
INSERT INTO TBL_OWNER
VALUES('01055556666', '주선유', 20, '경기도 남양주시');

/*반려동물 추가*/
INSERT INTO TBL_PET 
VALUES(SEQ_PET.NEXTVAL, '고양이', '잭', 1, '피부병', NULL);

/*보호자 테이블의 PK로 이름 수정*/
UPDATE TBL_OWNER
SET OWNER_NAME = '주선유'
WHERE OWNER_PHONE_NUMBER = '01012341234';

/*보호자 테이블의 PK로 이름 수정*/
UPDATE TBL_OWNER
SET OWNER_NAME = '한동석'
WHERE OWNER_PHONE_NUMBER = '01012341234';

/*
 * 반려동물의 테이블의 FK 수정
 * ※ 부모에 없는 값으로 수정할 수 없다.
 *    부모 테이블에 수정할 새로운 정보를 추가한 뒤
 *    해당 PK로 수정 가능! 
 * */
UPDATE TBL_PET
SET OWNER_PHONE_NUMBER = '01055556666'
WHERE PET_PIN_NUMBER IN(1, 2);

UPDATE TBL_OWNER
SET OWNER_PHONE_NUMBER = '01055556666'
WHERE OWNER_PHONE_NUMBER = '01012341234';

/*기존 반려동물 테이블의 제약조건 FK 삭제*/
ALTER TABLE TBL_PET DROP CONSTRAINT FK_PET;

/*반려동물 테이블의 제약조건 FK 추가, 보호자 삭제 시 등록된 반려동물 모두 자동으로 삭제*/
ALTER TABLE TBL_PET ADD CONSTRAINT FK_PET FOREIGN KEY(OWNER_PHONE_NUMBER)
REFERENCES TBL_OWNER(OWNER_PHONE_NUMBER)
ON DELETE CASCADE;

DELETE FROM TBL_OWNER
WHERE OWNER_PHONE_NUMBER = '01055556666';


